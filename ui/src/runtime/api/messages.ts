// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "messages.proto" (package "api", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "./google/protobuf/any";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message api.None
 */
export interface None {
}
/**
 * @generated from protobuf message api.Connection
 */
export interface Connection {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: repeated string subscribedNodesIDs = 2;
     */
    subscribedNodesIDs: string[];
}
/**
 * @generated from protobuf message api.Heartbeat
 */
export interface Heartbeat {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message api.StreamRequests
 */
export interface StreamRequests {
    /**
     * @generated from protobuf field: repeated api.StreamRequest requests = 1;
     */
    requests: StreamRequest[];
}
/**
 * @generated from protobuf message api.StreamResponses
 */
export interface StreamResponses {
    /**
     * @generated from protobuf field: repeated api.StreamResponse responses = 1;
     */
    responses: StreamResponse[];
}
/**
 * @generated from protobuf message api.StreamRequest
 */
export interface StreamRequest {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "none";
        /**
         * @generated from protobuf field: api.None none = 1;
         */
        none: None;
    } | {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: api.Heartbeat heartbeat = 2;
         */
        heartbeat: Heartbeat;
    } | {
        oneofKind: "acquireSession";
        /**
         * @generated from protobuf field: api.AcquireSession acquireSession = 3;
         */
        acquireSession: AcquireSession;
    } | {
        oneofKind: "createNode";
        /**
         * @generated from protobuf field: api.CreateNode createNode = 4;
         */
        createNode: CreateNode;
    } | {
        oneofKind: "updateNodeValue";
        /**
         * @generated from protobuf field: api.UpdateNodeValue updateNodeValue = 5;
         */
        updateNodeValue: UpdateNodeValue;
    } | {
        oneofKind: "subscribeToNode";
        /**
         * @generated from protobuf field: api.SubscribeToNode subscribeToNode = 6;
         */
        subscribeToNode: SubscribeToNode;
    } | {
        oneofKind: "unsubscribeFromNode";
        /**
         * @generated from protobuf field: api.UnsubscribeFromNode unsubscribeFromNode = 7;
         */
        unsubscribeFromNode: UnsubscribeFromNode;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message api.StreamResponse
 */
export interface StreamResponse {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "none";
        /**
         * @generated from protobuf field: api.None none = 1;
         */
        none: None;
    } | {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: api.Heartbeat heartbeat = 2;
         */
        heartbeat: Heartbeat;
    } | {
        oneofKind: "connection";
        /**
         * @generated from protobuf field: api.Connection connection = 3;
         */
        connection: Connection;
    } | {
        oneofKind: "session";
        /**
         * @generated from protobuf field: api.Session session = 4;
         */
        session: Session;
    } | {
        oneofKind: "node";
        /**
         * @generated from protobuf field: api.Node node = 5;
         */
        node: Node;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message api.UnaryStreamRequest
 */
export interface UnaryStreamRequest {
    /**
     * @generated from protobuf field: string connectionID = 1;
     */
    connectionID: string;
    /**
     * @generated from protobuf field: repeated api.StreamRequest requests = 2;
     */
    requests: StreamRequest[];
}
/**
 * @generated from protobuf message api.AcquireSession
 */
export interface AcquireSession {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "none";
        /**
         * @generated from protobuf field: api.None none = 1;
         */
        none: None; // in this case we create a new session
    } | {
        oneofKind: "sessionToken";
        /**
         * @generated from protobuf field: string sessionToken = 2;
         */
        sessionToken: string; // in this case we try to aquire a previous session
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message api.Session
 */
export interface Session {
    /**
     * @generated from protobuf field: string sessionToken = 1;
     */
    sessionToken: string;
    /**
     * @generated from protobuf field: uint32 active_connections = 2;
     */
    activeConnections: number;
    /**
     * @generated from protobuf field: repeated string subscribedNodesIDs = 3;
     */
    subscribedNodesIDs: string[];
}
/**
 * @generated from protobuf message api.Node
 */
export interface Node {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "some";
        /**
         * @generated from protobuf field: api.NodeValue some = 2;
         */
        some: NodeValue;
    } | {
        oneofKind: "none";
        /**
         * @generated from protobuf field: api.None none = 3;
         */
        none: None;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message api.NodeValue
 */
export interface NodeValue {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Any data = 2;
     */
    data?: Any;
}
/**
 * @generated from protobuf message api.CreateNode
 */
export interface CreateNode {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "some";
        /**
         * @generated from protobuf field: api.NodeValue some = 2;
         */
        some: NodeValue;
    } | {
        oneofKind: "none";
        /**
         * @generated from protobuf field: api.None none = 3;
         */
        none: None;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message api.UpdateNodeValue
 */
export interface UpdateNodeValue {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.Any data = 2;
     */
    data?: Any;
}
/**
 * @generated from protobuf message api.SubscribeToNode
 */
export interface SubscribeToNode {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message api.UnsubscribeFromNode
 */
export interface UnsubscribeFromNode {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class None$Type extends MessageType<None> {
    constructor() {
        super("api.None", []);
    }
    create(value?: PartialMessage<None>): None {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<None>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: None): None {
        return target ?? this.create();
    }
    internalBinaryWrite(message: None, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.None
 */
export const None = new None$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Connection$Type extends MessageType<Connection> {
    constructor() {
        super("api.Connection", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subscribedNodesIDs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Connection>): Connection {
        const message = { id: "", subscribedNodesIDs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Connection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Connection): Connection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* repeated string subscribedNodesIDs */ 2:
                    message.subscribedNodesIDs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Connection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* repeated string subscribedNodesIDs = 2; */
        for (let i = 0; i < message.subscribedNodesIDs.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.subscribedNodesIDs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.Connection
 */
export const Connection = new Connection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Heartbeat$Type extends MessageType<Heartbeat> {
    constructor() {
        super("api.Heartbeat", [
            { no: 1, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Heartbeat>): Heartbeat {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Heartbeat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Heartbeat): Heartbeat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp timestamp */ 1:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Heartbeat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp timestamp = 1; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.Heartbeat
 */
export const Heartbeat = new Heartbeat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequests$Type extends MessageType<StreamRequests> {
    constructor() {
        super("api.StreamRequests", [
            { no: 1, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamRequest }
        ]);
    }
    create(value?: PartialMessage<StreamRequests>): StreamRequests {
        const message = { requests: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamRequests>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRequests): StreamRequests {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated api.StreamRequest requests */ 1:
                    message.requests.push(StreamRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamRequests, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated api.StreamRequest requests = 1; */
        for (let i = 0; i < message.requests.length; i++)
            StreamRequest.internalBinaryWrite(message.requests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.StreamRequests
 */
export const StreamRequests = new StreamRequests$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamResponses$Type extends MessageType<StreamResponses> {
    constructor() {
        super("api.StreamResponses", [
            { no: 1, name: "responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamResponse }
        ]);
    }
    create(value?: PartialMessage<StreamResponses>): StreamResponses {
        const message = { responses: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamResponses>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamResponses): StreamResponses {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated api.StreamResponse responses */ 1:
                    message.responses.push(StreamResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamResponses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated api.StreamResponse responses = 1; */
        for (let i = 0; i < message.responses.length; i++)
            StreamResponse.internalBinaryWrite(message.responses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.StreamResponses
 */
export const StreamResponses = new StreamResponses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequest$Type extends MessageType<StreamRequest> {
    constructor() {
        super("api.StreamRequest", [
            { no: 1, name: "none", kind: "message", oneof: "data", T: () => None },
            { no: 2, name: "heartbeat", kind: "message", oneof: "data", T: () => Heartbeat },
            { no: 3, name: "acquireSession", kind: "message", oneof: "data", T: () => AcquireSession },
            { no: 4, name: "createNode", kind: "message", oneof: "data", T: () => CreateNode },
            { no: 5, name: "updateNodeValue", kind: "message", oneof: "data", T: () => UpdateNodeValue },
            { no: 6, name: "subscribeToNode", kind: "message", oneof: "data", T: () => SubscribeToNode },
            { no: 7, name: "unsubscribeFromNode", kind: "message", oneof: "data", T: () => UnsubscribeFromNode }
        ]);
    }
    create(value?: PartialMessage<StreamRequest>): StreamRequest {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRequest): StreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.None none */ 1:
                    message.data = {
                        oneofKind: "none",
                        none: None.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).none)
                    };
                    break;
                case /* api.Heartbeat heartbeat */ 2:
                    message.data = {
                        oneofKind: "heartbeat",
                        heartbeat: Heartbeat.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).heartbeat)
                    };
                    break;
                case /* api.AcquireSession acquireSession */ 3:
                    message.data = {
                        oneofKind: "acquireSession",
                        acquireSession: AcquireSession.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).acquireSession)
                    };
                    break;
                case /* api.CreateNode createNode */ 4:
                    message.data = {
                        oneofKind: "createNode",
                        createNode: CreateNode.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).createNode)
                    };
                    break;
                case /* api.UpdateNodeValue updateNodeValue */ 5:
                    message.data = {
                        oneofKind: "updateNodeValue",
                        updateNodeValue: UpdateNodeValue.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).updateNodeValue)
                    };
                    break;
                case /* api.SubscribeToNode subscribeToNode */ 6:
                    message.data = {
                        oneofKind: "subscribeToNode",
                        subscribeToNode: SubscribeToNode.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).subscribeToNode)
                    };
                    break;
                case /* api.UnsubscribeFromNode unsubscribeFromNode */ 7:
                    message.data = {
                        oneofKind: "unsubscribeFromNode",
                        unsubscribeFromNode: UnsubscribeFromNode.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).unsubscribeFromNode)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.None none = 1; */
        if (message.data.oneofKind === "none")
            None.internalBinaryWrite(message.data.none, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* api.Heartbeat heartbeat = 2; */
        if (message.data.oneofKind === "heartbeat")
            Heartbeat.internalBinaryWrite(message.data.heartbeat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* api.AcquireSession acquireSession = 3; */
        if (message.data.oneofKind === "acquireSession")
            AcquireSession.internalBinaryWrite(message.data.acquireSession, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* api.CreateNode createNode = 4; */
        if (message.data.oneofKind === "createNode")
            CreateNode.internalBinaryWrite(message.data.createNode, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* api.UpdateNodeValue updateNodeValue = 5; */
        if (message.data.oneofKind === "updateNodeValue")
            UpdateNodeValue.internalBinaryWrite(message.data.updateNodeValue, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* api.SubscribeToNode subscribeToNode = 6; */
        if (message.data.oneofKind === "subscribeToNode")
            SubscribeToNode.internalBinaryWrite(message.data.subscribeToNode, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* api.UnsubscribeFromNode unsubscribeFromNode = 7; */
        if (message.data.oneofKind === "unsubscribeFromNode")
            UnsubscribeFromNode.internalBinaryWrite(message.data.unsubscribeFromNode, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.StreamRequest
 */
export const StreamRequest = new StreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamResponse$Type extends MessageType<StreamResponse> {
    constructor() {
        super("api.StreamResponse", [
            { no: 1, name: "none", kind: "message", oneof: "data", T: () => None },
            { no: 2, name: "heartbeat", kind: "message", oneof: "data", T: () => Heartbeat },
            { no: 3, name: "connection", kind: "message", oneof: "data", T: () => Connection },
            { no: 4, name: "session", kind: "message", oneof: "data", T: () => Session },
            { no: 5, name: "node", kind: "message", oneof: "data", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<StreamResponse>): StreamResponse {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamResponse): StreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.None none */ 1:
                    message.data = {
                        oneofKind: "none",
                        none: None.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).none)
                    };
                    break;
                case /* api.Heartbeat heartbeat */ 2:
                    message.data = {
                        oneofKind: "heartbeat",
                        heartbeat: Heartbeat.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).heartbeat)
                    };
                    break;
                case /* api.Connection connection */ 3:
                    message.data = {
                        oneofKind: "connection",
                        connection: Connection.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).connection)
                    };
                    break;
                case /* api.Session session */ 4:
                    message.data = {
                        oneofKind: "session",
                        session: Session.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).session)
                    };
                    break;
                case /* api.Node node */ 5:
                    message.data = {
                        oneofKind: "node",
                        node: Node.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).node)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.None none = 1; */
        if (message.data.oneofKind === "none")
            None.internalBinaryWrite(message.data.none, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* api.Heartbeat heartbeat = 2; */
        if (message.data.oneofKind === "heartbeat")
            Heartbeat.internalBinaryWrite(message.data.heartbeat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* api.Connection connection = 3; */
        if (message.data.oneofKind === "connection")
            Connection.internalBinaryWrite(message.data.connection, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* api.Session session = 4; */
        if (message.data.oneofKind === "session")
            Session.internalBinaryWrite(message.data.session, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* api.Node node = 5; */
        if (message.data.oneofKind === "node")
            Node.internalBinaryWrite(message.data.node, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.StreamResponse
 */
export const StreamResponse = new StreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnaryStreamRequest$Type extends MessageType<UnaryStreamRequest> {
    constructor() {
        super("api.UnaryStreamRequest", [
            { no: 1, name: "connectionID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamRequest }
        ]);
    }
    create(value?: PartialMessage<UnaryStreamRequest>): UnaryStreamRequest {
        const message = { connectionID: "", requests: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnaryStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnaryStreamRequest): UnaryStreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string connectionID */ 1:
                    message.connectionID = reader.string();
                    break;
                case /* repeated api.StreamRequest requests */ 2:
                    message.requests.push(StreamRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnaryStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string connectionID = 1; */
        if (message.connectionID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.connectionID);
        /* repeated api.StreamRequest requests = 2; */
        for (let i = 0; i < message.requests.length; i++)
            StreamRequest.internalBinaryWrite(message.requests[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.UnaryStreamRequest
 */
export const UnaryStreamRequest = new UnaryStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AcquireSession$Type extends MessageType<AcquireSession> {
    constructor() {
        super("api.AcquireSession", [
            { no: 1, name: "none", kind: "message", oneof: "data", T: () => None },
            { no: 2, name: "sessionToken", kind: "scalar", oneof: "data", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AcquireSession>): AcquireSession {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AcquireSession>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcquireSession): AcquireSession {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.None none */ 1:
                    message.data = {
                        oneofKind: "none",
                        none: None.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).none)
                    };
                    break;
                case /* string sessionToken */ 2:
                    message.data = {
                        oneofKind: "sessionToken",
                        sessionToken: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AcquireSession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.None none = 1; */
        if (message.data.oneofKind === "none")
            None.internalBinaryWrite(message.data.none, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string sessionToken = 2; */
        if (message.data.oneofKind === "sessionToken")
            writer.tag(2, WireType.LengthDelimited).string(message.data.sessionToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.AcquireSession
 */
export const AcquireSession = new AcquireSession$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Session$Type extends MessageType<Session> {
    constructor() {
        super("api.Session", [
            { no: 1, name: "sessionToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "active_connections", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "subscribedNodesIDs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Session>): Session {
        const message = { sessionToken: "", activeConnections: 0, subscribedNodesIDs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Session>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Session): Session {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sessionToken */ 1:
                    message.sessionToken = reader.string();
                    break;
                case /* uint32 active_connections */ 2:
                    message.activeConnections = reader.uint32();
                    break;
                case /* repeated string subscribedNodesIDs */ 3:
                    message.subscribedNodesIDs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Session, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sessionToken = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        /* uint32 active_connections = 2; */
        if (message.activeConnections !== 0)
            writer.tag(2, WireType.Varint).uint32(message.activeConnections);
        /* repeated string subscribedNodesIDs = 3; */
        for (let i = 0; i < message.subscribedNodesIDs.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.subscribedNodesIDs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.Session
 */
export const Session = new Session$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends MessageType<Node> {
    constructor() {
        super("api.Node", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "some", kind: "message", oneof: "value", T: () => NodeValue },
            { no: 3, name: "none", kind: "message", oneof: "value", T: () => None }
        ]);
    }
    create(value?: PartialMessage<Node>): Node {
        const message = { id: "", value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Node>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Node): Node {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* api.NodeValue some */ 2:
                    message.value = {
                        oneofKind: "some",
                        some: NodeValue.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).some)
                    };
                    break;
                case /* api.None none */ 3:
                    message.value = {
                        oneofKind: "none",
                        none: None.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).none)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Node, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* api.NodeValue some = 2; */
        if (message.value.oneofKind === "some")
            NodeValue.internalBinaryWrite(message.value.some, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* api.None none = 3; */
        if (message.value.oneofKind === "none")
            None.internalBinaryWrite(message.value.none, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.Node
 */
export const Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeValue$Type extends MessageType<NodeValue> {
    constructor() {
        super("api.NodeValue", [
            { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 2, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<NodeValue>): NodeValue {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NodeValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeValue): NodeValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp timestamp */ 1:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* google.protobuf.Any data */ 2:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp timestamp = 1; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any data = 2; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.NodeValue
 */
export const NodeValue = new NodeValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNode$Type extends MessageType<CreateNode> {
    constructor() {
        super("api.CreateNode", [
            { no: 2, name: "some", kind: "message", oneof: "value", T: () => NodeValue },
            { no: 3, name: "none", kind: "message", oneof: "value", T: () => None }
        ]);
    }
    create(value?: PartialMessage<CreateNode>): CreateNode {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNode): CreateNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.NodeValue some */ 2:
                    message.value = {
                        oneofKind: "some",
                        some: NodeValue.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).some)
                    };
                    break;
                case /* api.None none */ 3:
                    message.value = {
                        oneofKind: "none",
                        none: None.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).none)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.NodeValue some = 2; */
        if (message.value.oneofKind === "some")
            NodeValue.internalBinaryWrite(message.value.some, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* api.None none = 3; */
        if (message.value.oneofKind === "none")
            None.internalBinaryWrite(message.value.none, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.CreateNode
 */
export const CreateNode = new CreateNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateNodeValue$Type extends MessageType<UpdateNodeValue> {
    constructor() {
        super("api.UpdateNodeValue", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<UpdateNodeValue>): UpdateNodeValue {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateNodeValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateNodeValue): UpdateNodeValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Any data */ 2:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateNodeValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Any data = 2; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.UpdateNodeValue
 */
export const UpdateNodeValue = new UpdateNodeValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeToNode$Type extends MessageType<SubscribeToNode> {
    constructor() {
        super("api.SubscribeToNode", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeToNode>): SubscribeToNode {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscribeToNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeToNode): SubscribeToNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeToNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.SubscribeToNode
 */
export const SubscribeToNode = new SubscribeToNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnsubscribeFromNode$Type extends MessageType<UnsubscribeFromNode> {
    constructor() {
        super("api.UnsubscribeFromNode", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnsubscribeFromNode>): UnsubscribeFromNode {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnsubscribeFromNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnsubscribeFromNode): UnsubscribeFromNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnsubscribeFromNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.UnsubscribeFromNode
 */
export const UnsubscribeFromNode = new UnsubscribeFromNode$Type();
