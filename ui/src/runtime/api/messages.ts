// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "messages.proto" (package "api", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message api.None
 */
export interface None {
}
/**
 * @generated from protobuf message api.ConnectionID
 */
export interface ConnectionID {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message api.Heartbeat
 */
export interface Heartbeat {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message api.StreamRequests
 */
export interface StreamRequests {
    /**
     * @generated from protobuf field: repeated api.StreamRequest requests = 1;
     */
    requests: StreamRequest[];
}
/**
 * @generated from protobuf message api.StreamResponses
 */
export interface StreamResponses {
    /**
     * @generated from protobuf field: repeated api.StreamResponse responses = 1;
     */
    responses: StreamResponse[];
}
/**
 * @generated from protobuf message api.StreamRequest
 */
export interface StreamRequest {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "none";
        /**
         * @generated from protobuf field: api.None none = 1;
         */
        none: None;
    } | {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: api.Heartbeat heartbeat = 2;
         */
        heartbeat: Heartbeat;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message api.StreamResponse
 */
export interface StreamResponse {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "none";
        /**
         * @generated from protobuf field: api.None none = 1;
         */
        none: None;
    } | {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: api.Heartbeat heartbeat = 2;
         */
        heartbeat: Heartbeat;
    } | {
        oneofKind: "connectionID";
        /**
         * @generated from protobuf field: api.ConnectionID connectionID = 3;
         */
        connectionID: ConnectionID;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message api.UnaryStreamRequest
 */
export interface UnaryStreamRequest {
    /**
     * @generated from protobuf field: api.ConnectionID connectionID = 1;
     */
    connectionID?: ConnectionID;
    /**
     * @generated from protobuf field: repeated api.StreamRequest requests = 2;
     */
    requests: StreamRequest[];
}
// @generated message type with reflection information, may provide speed optimized methods
class None$Type extends MessageType<None> {
    constructor() {
        super("api.None", []);
    }
    create(value?: PartialMessage<None>): None {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<None>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: None): None {
        return target ?? this.create();
    }
    internalBinaryWrite(message: None, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.None
 */
export const None = new None$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectionID$Type extends MessageType<ConnectionID> {
    constructor() {
        super("api.ConnectionID", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectionID>): ConnectionID {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectionID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectionID): ConnectionID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectionID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.ConnectionID
 */
export const ConnectionID = new ConnectionID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Heartbeat$Type extends MessageType<Heartbeat> {
    constructor() {
        super("api.Heartbeat", [
            { no: 5, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Heartbeat>): Heartbeat {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Heartbeat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Heartbeat): Heartbeat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp timestamp */ 5:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Heartbeat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp timestamp = 5; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.Heartbeat
 */
export const Heartbeat = new Heartbeat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequests$Type extends MessageType<StreamRequests> {
    constructor() {
        super("api.StreamRequests", [
            { no: 1, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamRequest }
        ]);
    }
    create(value?: PartialMessage<StreamRequests>): StreamRequests {
        const message = { requests: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamRequests>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRequests): StreamRequests {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated api.StreamRequest requests */ 1:
                    message.requests.push(StreamRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamRequests, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated api.StreamRequest requests = 1; */
        for (let i = 0; i < message.requests.length; i++)
            StreamRequest.internalBinaryWrite(message.requests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.StreamRequests
 */
export const StreamRequests = new StreamRequests$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamResponses$Type extends MessageType<StreamResponses> {
    constructor() {
        super("api.StreamResponses", [
            { no: 1, name: "responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamResponse }
        ]);
    }
    create(value?: PartialMessage<StreamResponses>): StreamResponses {
        const message = { responses: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamResponses>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamResponses): StreamResponses {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated api.StreamResponse responses */ 1:
                    message.responses.push(StreamResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamResponses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated api.StreamResponse responses = 1; */
        for (let i = 0; i < message.responses.length; i++)
            StreamResponse.internalBinaryWrite(message.responses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.StreamResponses
 */
export const StreamResponses = new StreamResponses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequest$Type extends MessageType<StreamRequest> {
    constructor() {
        super("api.StreamRequest", [
            { no: 1, name: "none", kind: "message", oneof: "data", T: () => None },
            { no: 2, name: "heartbeat", kind: "message", oneof: "data", T: () => Heartbeat }
        ]);
    }
    create(value?: PartialMessage<StreamRequest>): StreamRequest {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRequest): StreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.None none */ 1:
                    message.data = {
                        oneofKind: "none",
                        none: None.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).none)
                    };
                    break;
                case /* api.Heartbeat heartbeat */ 2:
                    message.data = {
                        oneofKind: "heartbeat",
                        heartbeat: Heartbeat.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).heartbeat)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.None none = 1; */
        if (message.data.oneofKind === "none")
            None.internalBinaryWrite(message.data.none, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* api.Heartbeat heartbeat = 2; */
        if (message.data.oneofKind === "heartbeat")
            Heartbeat.internalBinaryWrite(message.data.heartbeat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.StreamRequest
 */
export const StreamRequest = new StreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamResponse$Type extends MessageType<StreamResponse> {
    constructor() {
        super("api.StreamResponse", [
            { no: 1, name: "none", kind: "message", oneof: "data", T: () => None },
            { no: 2, name: "heartbeat", kind: "message", oneof: "data", T: () => Heartbeat },
            { no: 3, name: "connectionID", kind: "message", oneof: "data", T: () => ConnectionID }
        ]);
    }
    create(value?: PartialMessage<StreamResponse>): StreamResponse {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamResponse): StreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.None none */ 1:
                    message.data = {
                        oneofKind: "none",
                        none: None.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).none)
                    };
                    break;
                case /* api.Heartbeat heartbeat */ 2:
                    message.data = {
                        oneofKind: "heartbeat",
                        heartbeat: Heartbeat.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).heartbeat)
                    };
                    break;
                case /* api.ConnectionID connectionID */ 3:
                    message.data = {
                        oneofKind: "connectionID",
                        connectionID: ConnectionID.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).connectionID)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.None none = 1; */
        if (message.data.oneofKind === "none")
            None.internalBinaryWrite(message.data.none, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* api.Heartbeat heartbeat = 2; */
        if (message.data.oneofKind === "heartbeat")
            Heartbeat.internalBinaryWrite(message.data.heartbeat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* api.ConnectionID connectionID = 3; */
        if (message.data.oneofKind === "connectionID")
            ConnectionID.internalBinaryWrite(message.data.connectionID, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.StreamResponse
 */
export const StreamResponse = new StreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnaryStreamRequest$Type extends MessageType<UnaryStreamRequest> {
    constructor() {
        super("api.UnaryStreamRequest", [
            { no: 1, name: "connectionID", kind: "message", T: () => ConnectionID },
            { no: 2, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamRequest }
        ]);
    }
    create(value?: PartialMessage<UnaryStreamRequest>): UnaryStreamRequest {
        const message = { requests: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnaryStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnaryStreamRequest): UnaryStreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.ConnectionID connectionID */ 1:
                    message.connectionID = ConnectionID.internalBinaryRead(reader, reader.uint32(), options, message.connectionID);
                    break;
                case /* repeated api.StreamRequest requests */ 2:
                    message.requests.push(StreamRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnaryStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.ConnectionID connectionID = 1; */
        if (message.connectionID)
            ConnectionID.internalBinaryWrite(message.connectionID, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated api.StreamRequest requests = 2; */
        for (let i = 0; i < message.requests.length; i++)
            StreamRequest.internalBinaryWrite(message.requests[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.UnaryStreamRequest
 */
export const UnaryStreamRequest = new UnaryStreamRequest$Type();
