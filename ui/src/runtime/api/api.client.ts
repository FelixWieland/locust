// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { api } from "./api";
import type { None } from "./messages";
import type { UnaryStreamRequest } from "./messages";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamResponses } from "./messages";
import type { StreamRequests } from "./messages";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service api.api
 */
export interface IapiClient {
    /**
     * grpc-web currently doesnt support bidi streaming -> thats why the client stream is simulated by continues requests by the client that references the connection id
     *
     * @generated from protobuf rpc: Stream(api.StreamRequests) returns (stream api.StreamResponses);
     */
    stream(input: StreamRequests, options?: RpcOptions): ServerStreamingCall<StreamRequests, StreamResponses>;
    /**
     * @generated from protobuf rpc: StreamRequest(api.UnaryStreamRequest) returns (api.None);
     */
    streamRequest(input: UnaryStreamRequest, options?: RpcOptions): UnaryCall<UnaryStreamRequest, None>;
}
/**
 * @generated from protobuf service api.api
 */
export class apiClient implements IapiClient, ServiceInfo {
    typeName = api.typeName;
    methods = api.methods;
    options = api.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * grpc-web currently doesnt support bidi streaming -> thats why the client stream is simulated by continues requests by the client that references the connection id
     *
     * @generated from protobuf rpc: Stream(api.StreamRequests) returns (stream api.StreamResponses);
     */
    stream(input: StreamRequests, options?: RpcOptions): ServerStreamingCall<StreamRequests, StreamResponses> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamRequests, StreamResponses>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamRequest(api.UnaryStreamRequest) returns (api.None);
     */
    streamRequest(input: UnaryStreamRequest, options?: RpcOptions): UnaryCall<UnaryStreamRequest, None> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnaryStreamRequest, None>("unary", this._transport, method, opt, input);
    }
}
